import React, { FC, useRef, useCallback, useEffect } from 'react';
import qs from 'qs';

import { useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';

import {Categories, Sort, ItemBlock, Pagination, Skeleton} from '../components'

// import Categories, from '../components/Categories';
// import Sort from '../components/Sort'status;
// import ItemBlock from '../components/ItemBlock';         // Bad exports
// import Pagination from '../components/Pagination';
// import Skeleton from '../components/ItemBlock/Skeleton';

import { useAppDispatch } from '../redux/store';
import { selectPizzaData } from '../redux/pizza/selectors';
import { selectFilter } from '../redux/filter/selectors';
import { setCategoriesType, setCurrentPage } from '../redux/filter/slice';
import { fetchPizzas } from '../redux/pizza/asyncActions';

const Home: FC = () => {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();  

  const isSearch = useRef(false);
  // const isMounted = useRef(false);

  const { items, status } = useSelector(selectPizzaData);
  const { categoriesType, sort, currentPage, searchValue } = useSelector(selectFilter);
  const sortType = sort.sortProperty;

  const onChangeCategory = useCallback((idx: number) => {
    dispatch(setCategoriesType(idx));
  }, []) // —Å–æ–∑–¥–∞–π—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∏ –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞–π—Å—è
  // –µ—Å–ª–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞–π —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é

  const onChangePage = (num: number) => {
    dispatch(setCurrentPage(num));
  };

  const getPizzas = async () => {
    const sortBy = sortType.replace('-', '');
    const order = sortType.includes('-') ? 'asc' : 'desc';
    const category = categoriesType > 0 ? `category=${categoriesType}` : '';
    const search = searchValue ? `&search=${searchValue}` : '';

    dispatch(
      fetchPizzas({
        sortBy, // –ø–µ—Ä–µ–¥–∞–µ–º –Ω–∞—à–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
        order,
        category,
        search,
        currentPage: String(currentPage),
      }),
    );

    // –ú–æ–∂–Ω–æ –≤–æ–æ–±—â–µ —É–±—Ä–∞—Ç—å try catch –∏–±–æ —É –Ω–∞—Å –≤—Å–µ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —ç–∫—à–µ–Ω–∞ —Ñ–µ—Ç—á –ø–∏—Ü—Ü–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ –æ—à–∏–±–∫–∏ pending fulfilled rejected –∏ —Ç–¥

    window.scrollTo(0, 0);
  };

  // // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
  // React.useEffect(() => {
  //   if (isMounted.current) {
  //     const params = {
  //       categoriesType: categoriesType > 0 ? categoriesType : null,
  //       sortType,
  //       currentPage,
  //     };

  //     const queryString = qs.stringify(params, { skipNulls: true }); // –±–µ—Ä–µ–º —Ü–µ–ª—ã–π –æ–±—å–µ–∫—Ç –∏ –ø—Ä–µ–≤—Ä—â–∞–µ–º –≤ —Ü–µ–ª—É—é —Å—Ç—Ä–æ—á–∫—É —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤—à–∏—Ç—å –µ–≥–æ –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É

  //     navigate(`/?${queryString}`); // –ú—ã —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–¥–∞—Ç—å ? –∏–±–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∏ –Ω–∞—à—É —Å—Ç—Ä–æ–∫—É
  //   }

  //   if (!window.location.search) {
  //     dispatch(fetchPizzas({} as SearchPizzaParams)); // –ó–∞—Å—Ç–≤—è–ª–µ–º –æ–±—å–µ–∫—Ç –±—ã—Ç—å SearchPizzaParams
  //   }
  //   isMounted.current = true; // –ê–≥–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–Ω–¥–µ—Ä —Ç—Ä—É - —Ç–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –ª–æ–≥–∏–∫—É –∏ —Ç–∞–∫ –¥–∞–ª—å—à–µ
  //   // –ü—Ä–∏ —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–∏ —Ä–µ–Ω–¥–µ—Ä–µ —É –Ω–∞—Å –±—É–¥–µ—Ç false –æ–Ω –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç - –ø–æ—Ç–æ–º —Ö–æ–ø —É–∂–µ isMounted true
  //   // —É –Ω–∞—Å dispatch –∑–∞—Å—Ç–∞–≤–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–æ–≤–∞—Ç—Å—è —Ç–æ —É–∂–µ if(is<ounted.current) –±—É–¥–µ—Ç true
  // }, [categoriesType, sortType, currentPage]);

  // // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–¥–∞–∫—Å–µ
  // React.useEffect(() => {
  //   if (window.location.search) {
  //     const params = qs.parse(window.location.search.substring(1)) as unknown as SearchPizzaParams // —Å –ø–æ–º–æ—â—å—é qs –º—ã –ø–∞—Ä—Å–∏–º b substring –æ–±—Ä–µ–∑–∞–µ–º ?
  //     const sort = list.find((obj) => obj.sortProperty === params.sortBy); // –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º list from sort –∏ –Ω–∞—Ö–æ–¥–∏–º sortProperty –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –Ω–∞—à–∏–º pararms.sortType
  //     dispatch(
  //       setFilters({
  //         searchValue: params.search,
  //         categoriesType: Number(params.category),
  //         currentPage: Number(params.currentPage),
  //         sort: sort || list[0] // –∏–∑ URL –ø–∞—Ä—Å–∏–º —Å—Ç—Ä–æ—á–∫–∏ –Ω–æ –≤ redux —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –≥–æ–≤–æ—Ä–∏—Ç redux
  //         // –ï—Å–ª–∏ –Ω–∞—à–ª–∞—Å—å —Ç–æ –¥–µ–ª–∞–µ–º sort –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –º—ã –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  //       }), // –≤ –∏—Ç–æ–≥–µ –≤ —Ä–µ–¥–∫—Å –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –æ–±—å–µ–∫—Ç —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω—ã
  //        // –Ω–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç
  //     ); // –í—Å–µ —ç—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ —Å –ø–æ–º–æ—â—å—é dispatch –º—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Ö –≤ —Ä–µ–¥–∞–∫—Å

  //     isSearch.current = true; // –î–æ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π useEffect –º—ã –∑–∞—Ä–∞–Ω–µ–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–º –∑–∞—Ä–∞–Ω–µ–µ –¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ url
  //   } // –ï—Å–ª–∏ —Ç—É—Ç –µ—Å—Ç—å —á—Ç–æ—Ç–æ —Ç–æ –º—ã –±—É–¥–µ–º —ç—Ç–æ –ø–∞—Ä—Å–∏—Ç—å –∏–∑ –Ω–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –∏—Ö –≤ –æ–±—å–µ–∫—Ç
  // }, []); // sortType -> sortBy convert

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
  useEffect(() => {
    window.scrollTo(0, 0);

    if (!isSearch.current) {
      // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç—É –ø–æ–∏—Å–∫–∞ –ø–æ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
      getPizzas(); // –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ—Ç—É - —Ç–æ –º—ã –¥–µ–ª–∞–µ–º fetch –∑–∞–ø—Ä–æ—Å
    } // –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∏—ã –ø–æ–Ω—è–ª–∏ —á—Ç–æ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É

    isSearch.current = false;
  }, [categoriesType, sortType, searchValue, currentPage]);

  const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index} />);
  const pizzas = items.map((obj: any) => <ItemBlock key={obj.id} {...obj} />);

  return (
    <div className="container">
      <div className="content__top">
        <Categories value={categoriesType} onChangeCategory={onChangeCategory} />
        <Sort value={sort}/>
      </div>
      <h2 className="content__title">All products</h2>
      {status === 'error' ? (
        <div className="content__error-info">
          <h2>
            Error happened<span>üòï</span>
          </h2>
          <p>It was not possible to get pizzas. Please try again later</p>
        </div>
      ) : (
        <div className="content__items">{status === 'loading' ? skeletons : pizzas}</div>
      )}
      <Pagination currentPage={currentPage} onChangePage={onChangePage} />
    </div>
  );
}

export default Home;
